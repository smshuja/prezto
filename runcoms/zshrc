# Fig pre block. Keep at the top of this file.
[[ -f "$HOME/.fig/shell/zshrc.pre.zsh" ]] && builtin source "$HOME/.fig/shell/zshrc.pre.zsh"

source /opt/homebrew/opt/kube-ps1/share/kube-ps1.sh
PS1='$(kube_ps1)'$PS1
#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#
if type brew &>/dev/null; then
  FPATH=$(brew --prefix)/share/zsh/site-functions:$FPATH
fi
# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi


eval "$(direnv hook zsh)"


export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"
export KUBE_EDITOR="vim"

# Customize to your needs...

alias subl='/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl'
alias be='bundle exec'
alias ber='bundle exec rake'
alias berss='bundle exec rails s -p 3030 -b "ssl://0.0.0.0:3030?key=./support/dev-ssl/star_ttedev.me.key&cert=./support/dev-ssl/star_ttedev.me.pem"'
alias bers='bundle exec rails s -p 3030'
alias rcc="git ls-files -m | xargs ls -1 2>/dev/null | grep '\.rb$' | xargs bundle exec rubocop"
alias elc="git ls-files -m | xargs ls -1 2>/dev/null | grep -E 'app\/frontend\/.*\.(js|ts|jsx|tsx)$' | xargs node_modules/eslint/bin/eslint.js --max-warnings=0 --fix"
alias ubers="bundle && yarn install --pure-lockfile && bers"
alias uberss="bundle && yarn install --pure-lockfile && berss"
alias lhstart="cd ~/Projects/gitlab/psychometrics && bundle && yarn install --pure-lockfile && mert start psy"
alias lhstarts="cd ~/Projects/gitlab/psychometrics && bundle && yarn install --pure-lockfile && mert start psys"
alias rtest="bundle exec rake db:drop db:create db:structure:load RAILS_ENV=test"
alias lhgitclean="git branch --merged master --no-color | grep -v master | grep -v review | grep -v develop | xargs git branch -d"
# alias lhbuild="DT='date +%Y%m%d_%H%M' && docker build -t lhcontregistry.azurecr.io/psychometrics:$DT . && docker push lhcontregistry.azurecr.io/psychometrics:$DT"
alias tf="terraform"

function lhbuild {
  DT=`date +%Y%m%d_%H%M`
  docker buildx build --platform linux/amd64 -t lhcontregistry.azurecr.io/psychometrics:$DT . && docker push lhcontregistry.azurecr.io/psychometrics:$DT
}

function killports {
  if [ -z "$1" ]
  then
    echo "No port specified"
  else
    sudo lsof -ti ":$1" | xargs kill -9
  fi
}
function lhrestore {
  set -v
  if [ -z "$1" ]
  then
    database="mindmill_data"
  else
    database="$1"
  fi
  if [ -z "$2" ]
  then
    site="live"
  else
    site="$2"
  fi
  if [ -z "$3" ]
  then
    dump=`ls -t ~/Projects/gitlab/db-dumps/${site}/*.dump | head -1`
  else
    dump="$3"
  fi
  print "======== Deleting all tables"
  psql -d $database -c "DO \$\$ DECLARE \
    r RECORD; \
    BEGIN \
        FOR r IN (SELECT tablename FROM pg_tables WHERE schemaname = 'public') LOOP \
            EXECUTE 'DROP TABLE IF EXISTS ' || quote_ident(r.tablename) || ' CASCADE'; \
        END LOOP; \
    END \$\$;"
  print "======== Deleting all tables - Done"
  print "======== Restoring database"
  sleep 5
  pg_restore --no-owner --no-acl -d $database < $dump
  print "======== Restoring database - Done"
}
# alias lhbackup="heroku pg:backups:capture --app tte-lighthouse-prod && heroku pg:backups:download --app tte-lighthouse-prod && mv latest.dump \"../db-dumps/$(date +%F-%H_%M).live.dump\""

function lhbackup {
  set -v
  declare -A sites
  sites[live]="tte-lighthouse-prod"
  sites[dev]="tte-lighthouse-develop"
  sites[review]="tte-lighthouse"
  sites[staging]="tte-lighthouse-staging"
  sites[gotalent]="gotalent-ai"
  if [ -z "$1" ]
  then
    site="live"
  else
    site="$1"
  fi
  app=${${${sites[$site]}:+${sites[$site]}}:-0}
  if [ $app != 0 ]
  then
    print $app
  else
    print "invalid app"
    return
  fi
  currentDir="`pwd`"
  dumpDir="/Users/shuja/Projects/gitlab/db-dumps/${site}"
  mkdir -p "${dumpDir}"
  dump="${dumpDir}/$(date +%F-%H_%M).${site}.dump"
  heroku pg:backups:download --app $app && mv "${currentDir}/latest.dump" $dump
  print $dump
  # heroku pg:backups:capture --app tte-lighthouse-prod && heroku pg:backups:download --app tte-lighthouse-prod && mv latest.dump "../db-dumps/$(date +%F-%H_%M).live.dump"
}

eval "$(nodenv init -)"

export PATH=$PATH:~/Library/Python/3.7/bin

export PATH=$PATH:~/bin

alias ascr='mkdir -p ~/Desktop/asciinema && asciinema rec ~/Desktop/asciinema/recording-$(date +%F_%T).cast'
alias gdone="git branch --merged | sed '/  master$/d' | sed '/  develop$/d' | sed '/  review$/d' | sed '/^\** master$/d' | sed '/^\** develop$/d'| sed '/^\** review$/d' >| /tmp/merged-branches && vi /tmp/merged-branches && xargs git branch -d </tmp/merged-branches"
# tabtab source for serverless package
# uninstall by removing these lines or running `tabtab uninstall serverless`
[[ -f /Users/shuja/.nodenv/versions/8.0.0/lib/node_modules/serverless/node_modules/tabtab/.completions/serverless.zsh ]] && . /Users/shuja/.nodenv/versions/8.0.0/lib/node_modules/serverless/node_modules/tabtab/.completions/serverless.zsh
# tabtab source for sls package
# uninstall by removing these lines or running `tabtab uninstall sls`
[[ -f /Users/shuja/.nodenv/versions/8.0.0/lib/node_modules/serverless/node_modules/tabtab/.completions/sls.zsh ]] && . /Users/shuja/.nodenv/versions/8.0.0/lib/node_modules/serverless/node_modules/tabtab/.completions/sls.zsh
# tabtab source for slss package
# uninstall by removing these lines or running `tabtab uninstall slss`
[[ -f /Users/shuja/.nodenv/versions/8.0.0/lib/node_modules/serverless/node_modules/tabtab/.completions/slss.zsh ]] && . /Users/shuja/.nodenv/versions/8.0.0/lib/node_modules/serverless/node_modules/tabtab/.completions/slss.zsh. "/Users/shuja/.acme.sh/acme.sh.env"

eval "$(rbenv init -)"

bindkey -M viins '^r' history-incremental-search-backward
bindkey -M vicmd '^r' history-incremental-search-backward
export PATH="/usr/local/opt/postgresql@11/bin:$PATH"

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:/usr/local/opt/postgresql@11/bin:$HOME/.zprezto/scripts:$PATH"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh


export KUBE_PS1_NS_ENABLE=false
export KUBE_PS1_SYMBOL_ENABLE=false
kube_ps1_autohide() { kube_ps1 | sed 's/^(.*}N\/A%.*:.*}N\/A%.*)$//' }
PROMPT='$(kube_ps1_autohide)'$PROMPT



alias gam="/Users/shuja/bin/gamadv-xtd3/gam"

export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# bun completions
[ -s "/Users/shuja/.bun/_bun" ] && source "/Users/shuja/.bun/_bun"

# bun
export BUN_INSTALL="/Users/shuja/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"
export PATH="/Applications/Postgres.app/Contents/Versions/latest/bin:$PATH"

export MH_OUTGOING_SMTP="/Users/shuja/Projects/gitlab/mailhog-smtp.json"

# Fig post block. Keep at the bottom of this file.
[[ -f "$HOME/.fig/shell/zshrc.post.zsh" ]] && builtin source "$HOME/.fig/shell/zshrc.post.zsh"

. /opt/homebrew/opt/asdf/libexec/asdf.sh

# append completions to fpath
fpath=(${ASDF_DIR}/completions $fpath)
# initialise completions with ZSH's compinit
autoload -Uz compinit && compinit

# 1Password auto-completion
eval "$(op completion zsh)"; compdef _op op

if [[ -s "${ZDOTDIR:-$HOME}/.zshrc_local.sh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zshrc_local.sh"
fi

export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
export PUPPETEER_EXECUTABLE_PATH=`which chromium`
alias gam="/Users/shuja/bin/gam/gam"
